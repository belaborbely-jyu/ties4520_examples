/**
 * This software is copyrighted and licensed; see the accompanying license file for copyright holders and terms.
 */
package info.sswap.api.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import info.sswap.api.model.RDG;
import info.sswap.api.model.RIG;
import info.sswap.api.model.RQG;
import info.sswap.api.model.RRG;
import info.sswap.api.model.SSWAP;
import info.sswap.api.model.SSWAPGraph;
import info.sswap.api.model.SSWAPObject;
import info.sswap.api.model.SSWAPProtocol;
import info.sswap.api.model.SSWAPProvider;
import info.sswap.api.model.SSWAPResource;
import info.sswap.api.model.SSWAPSubject;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized.Parameters;

import info.sswap.api.test.PolySuite.Config;
import info.sswap.api.test.PolySuite.Configuration;

@RunWith(PolySuite.class)
public class SharedURITests {		
	/**
	 * Namespace for URIs generated in this tests
	 */
	public static final String URI_NS = "urn:sswap:test:";
	
	/**
	 * Namespace for all "anyuri" (unique) URIs
	 */
	public static final String ANY_URI_NS = URI_NS + "anyuri:";
	
	/**
	 * Namespace for all "const" (shared) URIs
	 */
	public static final String CONST_URI_NS = URI_NS + "const:";
	
	// indices/positions of URIs in parameters passed to this test 
	
	public static final int RESOURCE_INDEX = 0;
	public static final int SUBJECT_INDEX = 1;
	public static final int OBJECT_INDEX = 2;
	public static final int PROVIDER_INDEX = 3;
	
	// URIs passed to the test instance
	
	private URI resourceURI;
	private URI subjectURI;
	private URI objectURI;
	private URI providerURI;
	
	/**
	 * Creates a test instance with given parameters
	 * 
	 * @param uris
	 */
	public SharedURITests(Object[] uris) {
		resourceURI = (URI) uris[RESOURCE_INDEX];
		subjectURI = (URI) uris[SUBJECT_INDEX];
		objectURI = (URI) uris[OBJECT_INDEX];
		providerURI = (URI) uris[PROVIDER_INDEX];
	}
	
	/**
	 * Generates a unique URI
	 * 
	 * @return a URI that should be unique
	 */
	private static URI anyURI() {
		return URI.create(ANY_URI_NS + UUID.randomUUID().toString());
	}
	
	/**
	 * Checks whether the URI is one of the URIs generated by this test suite for "any" (unique) URIs 
	 * 
	 * @param uri uri to be checked
	 * @return true/false
	 */
	private static boolean isAnyURI(URI uri) {
		return uri.toString().startsWith(ANY_URI_NS);
	}
	
	/**
	 * Generates a "constant" URI.
	 * 
	 * @param id identifier of the constant URI -- all calls with the same id, will generate same URIs
	 * @return a "constant" URI
	 */
	private static URI constURI(int id) {
		return URI.create(CONST_URI_NS + id);
	}
	
	/**
	 * Checks whether the URI is one of the URIs generated by this test suite for constant (shared URI)s
	 * 
	 * @param uri the URI
	 * @return true/false
	 */
	private static boolean isConstURI(URI uri) {
		return uri.toString().startsWith(CONST_URI_NS);
	}
	
	/**
	 * Extracts the constant identifier from the "constant" URI created by this test suite.
	 * 
	 * @param uri the URI
	 * @return constant identifier
	 */
	private static String getConstID(URI uri) {
		return uri.toString().substring(CONST_URI_NS.length());
	}
	
	/**
	 * Creates a short (usually one letter) summarization of the URI passed as a parameter to this test suite
	 * so that it can be included in the name for the run/test.
	 * 
	 * @param uri the URI
	 * @return a short (usually one letter) summarization
	 */
	private static String serializeParam(URI uri) {
		if (isAnyURI(uri)) {
			// any URI -- use wildcard character
			return "*";
		}
		else if (isConstURI(uri)) {
			// constant URI -- use the constant from the URI (typically one letter, unless we went over 9 constants)
			return getConstID(uri);
		}
		else {
			// for all other URIs -- just a question mark
			return "?";
		}
	}

	@Config
	public static Configuration getConfig() {
		final List<Object[]> data = new LinkedList<Object[]>();
		
		// the nested loops below generate all possible kinds of shared/unique URIs
		// if the counter for the given individual URI is 0, then we generate a unique URI
		// for all other counter values we generate a (constant URI; each counter value generates a different constant)
		
		// set the limit to 5 -> 0 is for any value, and then there are remaining 4 values to test all combinations of URI sharing/uniqueness
		// among 4 types of sswap nodes (resources, subjects, objects, and providers) -- we do not test here setting of URIs on graphs though
		// (there is no method in the API that allows us to set a URI on a sswap:Graph)
	
		int counterLimit = 5;
		
		for (int resourceCounter = 0; resourceCounter < counterLimit; resourceCounter++) {
			for (int subjectCounter = 0; subjectCounter < counterLimit; subjectCounter++) {
				for (int objectCounter = 0; objectCounter < counterLimit; objectCounter++) {
					for (int providerCounter = 0; providerCounter < counterLimit; providerCounter++) {
						URI resourceURI = (resourceCounter == 0)? anyURI() : constURI(resourceCounter);
						URI subjectURI = (subjectCounter == 0)? anyURI() : constURI(subjectCounter);
						URI objectURI = (objectCounter == 0)? anyURI() : constURI(objectCounter);
						URI providerURI = (providerCounter == 0)? anyURI() : constURI(providerCounter);
						
						if (resourceURI.equals(providerURI)) {							
							// do not create tests where URI is shared by resource and provider
							// (they are effectively disjoint because provider cannot have any sswap:providedBy statements).
							continue;
						}
						
						data.add(new Object[][] { { resourceURI, subjectURI, objectURI, providerURI } });
					}
				}
			}
		}
		
		return new Configuration() {			
			@Override
			public int size() {
				return data.size();
			}

			@Override
			public Object[] getTestValue(int index) {
				return data.get(index);
			}

			@Override
			public String getTestName(int index) {
				Object[] args = data.get(index);

				StringBuffer name = new StringBuffer("shared-uri");

				for (Object argSet : args) {
					for (Object subArg : (Object[]) argSet) {
						String val = "?";

						if (subArg instanceof URI) {
							val = serializeParam((URI) subArg);
						}

						name.append("-");
						name.append(val);
					}
				}

				return name.toString();
			}
		};

	}
	
	@Test
	public void testCreatedRDG() {		
		RDG rdg = createTestRDG();
		
		testSharedURIs(rdg);		
	}
	
	@Test
	public void testReadRDG() throws IOException {
		RDG rdg = SSWAP.getResourceGraph(createTestGraphAsInputStream(), RDG.class);		
		
		testSharedURIs(rdg);		
	}
	
	@Test
	public void testRRGToRIGConversion() throws IOException {
		RDG rdg = SSWAP.getResourceGraph(createTestGraphAsInputStream(), RDG.class);
		
		RRG rrg = SSWAP.getResourceGraph(createTestGraphAsInputStream(), RRG.class);
		
		RIG rig = rrg.createRIG(rdg);
		
		assertNotNull(rig);
		
		SSWAPSubject subject = rig.getResource().getGraph().getSubject();
		SSWAPObject object = subject.getObject();
		
		assertEquals(objectURI, subject.getURI());
		assertEquals(objectURI, object.getURI());
		
		RDG rdg2 = SSWAP.createRDG(anyURI(), "testname", "testdescription", SSWAP.createProvider(anyURI()));
		
		SSWAPGraph graph = rdg2.createGraph();
		SSWAPSubject rdgSubject = rdg2.createSubject();
		SSWAPObject rdgObject = rdg2.createObject();
		
		rdgSubject.setObject(rdgObject);
		graph.setSubject(rdgSubject);
		rdg2.getResource().setGraph(graph);

		rig = rrg.createRIG(rdg2);
		
		assertNotNull(rig);
		assertNotNull(rig.getResource());
		assertNotNull(rig.getResource().getGraph());
		assertNotNull(rig.getResource().getGraph().getSubject());
		
		subject = rig.getResource().getGraph().getSubject();
		object = subject.getObject();
		
		assertEquals(objectURI, subject.getURI());
		assertTrue(object.isAnonymous());		
	}

	
	private RDG createTestRDG() {
		RDG rdg = SSWAP.createRDG(resourceURI, "testname", "testdescription", SSWAP.createProvider(providerURI));
		
		SSWAPResource resource = rdg.getResource();
		
		SSWAPGraph graph = rdg.createGraph();		
		SSWAPSubject subject = rdg.createSubject(subjectURI);
		SSWAPObject object = rdg.createObject(objectURI);
		
		subject.setObject(object);
		graph.setSubject(subject);
		resource.setGraph(graph);
		
		return rdg;
	}
	
	private InputStream createTestGraphAsInputStream() throws IOException {
		RDG rdg = createTestRDG();
		
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		
		rdg.serialize(bos);		
		ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
		
		String testGraph = new String(bos.toByteArray());		
		bos.close();
		
		return bis;
	}
	
	private void testSharedURIs(SSWAPProtocol protocol) {
		SSWAPResource resource = protocol.getResource();
		
		SSWAPProvider provider = resource.getProvider();
		
		SSWAPGraph graph = resource.getGraph();
		SSWAPSubject subject = graph.getSubject();
		SSWAPObject object = subject.getObject();
		
		resource.getGraph().getSubject().getObject();
		
		for (SSWAPGraph testGraph : resource.getGraphs()) {
			for (SSWAPSubject testSubject : testGraph.getSubjects()) {
				for (SSWAPObject testObject : testSubject.getObjects()) {
					
					if (resourceURI.equals(subjectURI)) {
						assertTrue(resource.isSSWAPSubject());
						assertNotNull(resource.asSSWAPSubject());
						
						assertTrue(subject.isSSWAPResource());
						
						assertTrue(resource.asSSWAPSubject() == testSubject);
						assertTrue(testSubject.asSSWAPResource() == resource);
					}
					else {
						assertFalse(resource.isSSWAPSubject());
						assertNull(resource.asSSWAPSubject());
						
						assertFalse(subject.isSSWAPResource());
					}
					
					if (resourceURI.equals(objectURI)) {
						assertTrue(resource.isSSWAPObject());
						assertNotNull(resource.asSSWAPObject());
						
						assertTrue(object.isSSWAPResource());
						
						assertTrue(resource.asSSWAPObject() == testObject);
						assertTrue(testObject.asSSWAPResource() == resource);
					}
					else {
						assertFalse(resource.isSSWAPObject());
						assertNull(resource.asSSWAPObject());
						
						assertFalse(object.isSSWAPResource());
					}
					
					if (subjectURI.equals(objectURI)) {
						assertTrue(testSubject.isSSWAPObject());
						assertNotNull(testSubject.asSSWAPObject());
						
						assertTrue(object.isSSWAPSubject());
						
						assertTrue(testSubject.asSSWAPObject() == testObject);
						assertTrue(testObject.asSSWAPSubject() == testSubject);
					}
					else {
						assertFalse(testSubject.isSSWAPObject());
						assertNull(testSubject.asSSWAPObject());
						
						assertFalse(object.isSSWAPSubject());
					}
				
					if (subjectURI.equals(providerURI)) {
						assertTrue(testSubject.isSSWAPProvider());
						assertNotNull(testSubject.asSSWAPProvider());
						
						assertTrue(provider.isSSWAPSubject());
						
						assertTrue(testSubject.asSSWAPProvider() == provider);
						assertTrue(provider.asSSWAPSubject() == testSubject);
					}
					else {
						assertFalse(testSubject.isSSWAPProvider());
						assertNull(testSubject.asSSWAPProvider());
						
						assertFalse(provider.isSSWAPSubject());
					}
					
					if (objectURI.equals(providerURI)) {
						assertTrue(testObject.isSSWAPProvider());
						assertNotNull(testObject.asSSWAPProvider());
						
						assertTrue(provider.isSSWAPObject());
						
						assertTrue(testObject.asSSWAPProvider() == provider);
						assertTrue(provider.asSSWAPObject() == testObject);
					}
					else {
						assertFalse(testObject.isSSWAPProvider());
						assertNull(testObject.asSSWAPProvider());
						
						assertFalse(provider.isSSWAPObject());
					}
					
					for (SSWAPSubject testSubject2 : testObject.getSubjects()) {
						assertEquals(testSubject, testSubject2);
						
						for (SSWAPGraph testGraph2 : testSubject2.getGraphs()) {
							assertEquals(testGraph, testGraph2);
							
							assertEquals(resource, testGraph.getResource());
						}
					}
				}
			}
		}
		
	}
	
}
